name: Build, Test, and Release Skryper

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Fix Python environment on macOS
        if: matrix.os == 'macos-latest'
        run: |
          python -m ensurepip --default-pip
          python -m pip install --upgrade pip setuptools wheel

      - name: Install test dependencies
        run: |
          python -m pip install pytest pyinstaller

      - name: Run tests
        shell: bash
        run: |
          echo "Running tests..."
          PYTHONPATH=src pytest src/tests/

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Fix Python environment on macOS
        if: matrix.os == 'macos-latest'
        run: |
          python -m ensurepip --default-pip
          python -m pip install --upgrade pip setuptools wheel

      - name: Install PyInstaller
        run: python -m pip install pyinstaller

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $currentDate = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
          pyinstaller --name "Skryper_$($currentDate)" --onefile src/app/main.py

      - name: Build .app for macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          currentDate=$(date +"%Y-%m-%d_%H-%M-%S")
          app_name="Skryper_macOS_$currentDate"
          pyinstaller --onefile --name "$app_name" src/app/main.py

          mkdir -p "dist/$app_name.app/Contents/MacOS"
          mkdir -p "dist/$app_name.app/Contents/Resources"

          info_plist_path="dist/$app_name.app/Contents/Info.plist"
          echo '<?xml version="1.0" encoding="UTF-8"?>' > "$info_plist_path"
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$info_plist_path"
          echo '<plist version="1.0">' >> "$info_plist_path"
          echo '<dict>' >> "$info_plist_path"
          echo "  <key>CFBundleExecutable</key>" >> "$info_plist_path"
          echo "  <string>$app_name</string>" >> "$info_plist_path"
          echo "  <key>CFBundleIdentifier</key>" >> "$info_plist_path"
          echo "  <string>com.skryper.app</string>" >> "$info_plist_path"
          echo "  <key>CFBundleName</key>" >> "$info_plist_path"
          echo "  <string>Skryper</string>" >> "$info_plist_path"
          echo "  <key>CFBundleVersion</key>" >> "$info_plist_path"
          echo "  <string>1.0</string>" >> "$info_plist_path"
          echo "  <key>CFBundlePackageType</key>" >> "$info_plist_path"
          echo "  <string>APPL</string>" >> "$info_plist_path"
          echo '</dict>' >> "$info_plist_path"
          echo '</plist>' >> "$info_plist_path"

          mv "dist/$app_name" "dist/$app_name.app/Contents/MacOS/skryper-bin"

          echo '#!/bin/bash' > "dist/$app_name.app/Contents/MacOS/terminal-launch.sh"
          echo 'cd "$(dirname "$0")"' >> "dist/$app_name.app/Contents/MacOS/terminal-launch.sh"
          echo 'chmod +x skryper-bin' >> "dist/$app_name.app/Contents/MacOS/terminal-launch.sh"
          echo './skryper-bin' >> "dist/$app_name.app/Contents/MacOS/terminal-launch.sh"
          chmod +x "dist/$app_name.app/Contents/MacOS/terminal-launch.sh"

          echo '#!/bin/bash' > "dist/$app_name.app/Contents/MacOS/$app_name"
          echo 'exec osascript -e '\''tell application "Terminal"'\' >> "dist/$app_name.app/Contents/MacOS/$app_name"
          echo '  do script "cd \"'"\$(dirname \"\$0\")"'\"; ./terminal-launch.sh"' >> "dist/$app_name.app/Contents/MacOS/$app_name"
          echo '  activate' >> "dist/$app_name.app/Contents/MacOS/$app_name"
          echo 'end tell'\'' ' >> "dist/$app_name.app/Contents/MacOS/$app_name"
          chmod +x "dist/$app_name.app/Contents/MacOS/$app_name"

          mkdir -p release-mac
          mv "dist/$app_name.app" release-mac/
          cd release-mac
          zip -r "$app_name.zip" "$app_name.app"

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: skryper-exe
          path: dist/Skryper_*.exe

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: skryper-mac
          path: release-mac/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: skryper-exe
          path: .

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: skryper-mac
          path: .

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Skryper_*.exe
            Skryper_macOS_*.zip
          tag_name: "v${{ github.run_id }}-${{ github.run_number }}"
          name: "Release ${{ github.run_id }}-${{ github.run_number }}"
          body: "Automated release of Skryper version ${{ github.run_id }}-${{ github.run_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
